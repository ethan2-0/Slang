namespace stdlib;

// Replaced method
fn internal.print(value: [int]) {
    die("Call to stdlib.internal.print before being replaced");
    // If stdlib.internal.exit(...) hasn't been replaced, that previous call
    // won't exit
    let arr = [0];
    let num = arr[1];
}
// Replaced method
fn internal.exit(status: int) {
    println("Error: call to stdlib.internal.exit before being replaced");
    // I would call die(...), but we know for certain that exit(...) doesn't
    // work, so what's the point?
    let arr = [0];
    let num = arr[1];
}
// Replaced method
fn internal.read(buff: [int], num_chars: int): int {
    die("Call to stdlib.internal.read before being replaced");
    // If stdlib.internal.exit(...) hasn't been replaced, that previous call
    // won't exit
    let arr = [0];
    let num = arr[1];
    return -1;
}
// Replaced method
fn internal.traceback() {
    // Do nothing
    // This is replaced directly in interpreter.c so we don't have to deal with
    // the case that this wouldn't be replaced
}
// Replaced method
fn internal.replace(index: int, symbol_name: [int], method_name: [int]) {
    // Do nothing
    // Same applies as stdlib.internal.traceback(...)
}
// Replaced method
fn internal.create_rtlib(): int {
    // Do nothing
    // Same applies as stdlib.internal.traceback(...)
    return -1;
}
fn internal.create_lib(path: [int]): int {
    // Do nothing
    // This is replaced directly in interpreter.c so we don't have to deal with
    // the case that this wouldn't be replaced
    return -1;
}
// Replaced method
fn internal.close_native_lib(index: int) {
    // Do nothing
    // Same applies as stdlib.internal.traceback(...)
}

static rtlib_loaded: bool = false;

fn load_rtlib() {
    if(rtlib_loaded) {
        return;
    }
    let rtlib = stdlib.internal.create_rtlib();
    stdlib.internal.replace(rtlib, ("rtlib_exit")._getCleanBuffer(), ("stdlib.internal.exit")._getCleanBuffer());
    stdlib.internal.replace(rtlib, ("rtlib_print")._getCleanBuffer(), ("stdlib.internal.print")._getCleanBuffer());
    stdlib.internal.replace(rtlib, ("rtlib_read")._getCleanBuffer(), ("stdlib.internal.read")._getCleanBuffer());
    stdlib.internal.close_native_lib(rtlib);
    rtlib_loaded = true;
}

fn die(message: String) {
    print("Fatal error: ");
    print(message);
    print("\n");
    stdlib.internal.traceback();
    exit(1);
}
fn exit(code: int) {
    if(not rtlib_loaded) {
        load_rtlib();
    }
    stdlib.internal.exit(code);
}
class String {
    chars: [int];
    startIndex: int;
    length: int;
    ctor(chars: [int], startIndex: int, length: int) {
        if(startIndex + length > #chars) {
            die("Given length that overruns end of string");
        }
        this.chars = chars;
        this.startIndex = startIndex;
        if(length == -1) {
            length = #chars;
        }
        this.length = length;
    }
    fn charAt(index: int): int {
        if(index > this.length) {
            die("charAt index out of bounds");
        }
        return this.chars[index + this.startIndex];
    }
    fn _getCleanBuffer(): [int] {
        if(this.startIndex == 0 and this.length == #this.chars) {
            return this.chars;
        }
        return this._getBufferCopy();
    }
    fn _getBufferCopy(): [int] {
        let newBuff = [int: this.length];
        for(let i = 0; i < this.length; i++) {
            newBuff[i] = this.chars[this.startIndex + i];
        }
        this.chars = newBuff;
        return newBuff;
    }
    fn concat(other: String): String {
        let newBuff = [int: other.length + this.length];
        let cleanBuff = this._getCleanBuffer();
        let otherCleanBuff = other._getCleanBuffer();
        for(let i = 0; i < #cleanBuff; i++) {
            newBuff[i] = cleanBuff[i];
        }
        for(let i = 0; i < #otherCleanBuff; i++) {
            newBuff[i + #cleanBuff] = otherCleanBuff[i];
        }
        return new String(newBuff, 0, this.length + other.length);
    }
    fn substr(startIndex: int, endIndex: int): String {
        if(startIndex < 0) {
            startIndex = this.length - startIndex;
        }
        if(endIndex < 0) {
            endIndex = this.length - endIndex;
        }
        if(endIndex >= this.length) {
            endIndex = this.length;
        }
        if(startIndex >= this.length or endIndex > this.length) {
            die("substr index out of bounds");
        }
        return new String(this.chars, this.startIndex + startIndex, endIndex - startIndex);
    }
    fn substrOpen(startIndex: int): String {
        if(startIndex < 0) {
            startIndex = this.length - startIndex;
        }
        return this.substr(startIndex, this.length);
    }
    override fn equals(other_: Object): bool {
        if(not other_ instanceof String) {
            return false;
        }
        let other = other_ as String;
        if(other.length != this.length) {
            return false;
        }
        if(other.chars == this.chars) {
            return this.startIndex == other.startIndex;
        }
        for(let i = 0; i < this.length; i++) {
            if(this.charAt(i) != other.charAt(i)) {
                return false;
            }
        }
        return true;
    }
    fn indexOf(other: String): int {
        for(let i = 0; i <= (this.length - other.length); i++) {
            let isThisTime = true;
            for(let j = 0; j < other.length and isThisTime; j++) {
                if(this.charAt(i + j) != other.charAt(j)) {
                    isThisTime = false;
                }
            }
            if(isThisTime) {
                return i;
            }
        }
        return -1;
    }
    fn indexOfChar(ch: int): int {
        for(let i = 0; i < this.length; i++) {
            if(ch == this.charAt(i)) {
                return i;
            }
        }
        return -1;
    }
    fn contains(other: String): bool {
        return this.indexOf(other) != -1;
    }
    fn containsChar(other: int): bool {
        return this.indexOfChar(other) != -1;
    }
    fn strip(): String {
        let whitespace = " \t\n\r\v\f";
        let leftIndex = 0;
        if(leftIndex >= this.length) {
            return "";
        }
        while(whitespace.containsChar(this.charAt(leftIndex))) {
            leftIndex++;
            if(leftIndex >= this.length) {
                return "";
            }
        }
        let rightIndex = this.length - 1;
        while(whitespace.containsChar(this.charAt(rightIndex))) {
            rightIndex--;
        }
        return this.substr(leftIndex, rightIndex + 1);
    }
    fn trim(): String {
        return this.strip();
    }
    fn lowercase(): String {
        let lowercase = "abcdefghijklmnopqrstuvwxyz";
        let uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        let containsUppercaseLetter = false;
        for(let i = 0; i < this.length; i++) {
            if(uppercase.containsChar(this.charAt(i))) {
                containsUppercaseLetter = true;
            }
        }
        if(not containsUppercaseLetter) {
            return this;
        }
        let newBuff = this._getBufferCopy();
        for(let i = 0; i < #newBuff; i++) {
            if(uppercase.containsChar(newBuff[i])) {
                newBuff[i] = lowercase.charAt(uppercase.indexOfChar(newBuff[i]));
            }
        }
        return new String(newBuff, 0, #newBuff);
    }
    fn uppercase(): String {
        let uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        let lowercase = "abcdefghijklmnopqrstuvwxyz";
        let containsLowercaseLetter = false;
        for(let i = 0; i < this.length; i++) {
            if(lowercase.containsChar(this.charAt(i))) {
                containsLowercaseLetter = true;
            }
        }
        if(not containsLowercaseLetter) {
            return this;
        }
        let newBuff = this._getBufferCopy();
        for(let i = 0; i < #newBuff; i++) {
            if(lowercase.containsChar(newBuff[i])) {
                newBuff[i] = uppercase.charAt(lowercase.indexOfChar(newBuff[i]));
            }
        }
        return new String(newBuff, 0, #newBuff);
    }
    fn equalsIgnoreCase(other: String): bool {
        if(other.length != this.length) {
            return false;
        }
        let lowercase = "abcdefghijklmnopqrstuvwxyz";
        let uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        for(let i = 0; i < this.length; i++) {
            let thisChar = this.charAt(i);
            let otherChar = other.charAt(i);
            if(thisChar != otherChar) {
                let thisCharIndex = -2;
                if(lowercase.containsChar(thisChar)) {
                    thisCharIndex = lowercase.indexOfChar(thisChar);
                } else if(uppercase.containsChar(thisChar)) {
                    thisCharIndex = uppercase.indexOfChar(thisChar);
                }
                let otherCharIndex = -1;
                if(lowercase.containsChar(otherChar)) {
                    otherCharIndex = lowercase.indexOfChar(otherChar);
                } else if(uppercase.containsChar(otherChar)) {
                    otherCharIndex = uppercase.indexOfChar(otherChar);
                }
                if(thisCharIndex != otherCharIndex) {
                    return false;
                }
            }
        }
        return true;
    }
    override fn getHashCode(): int {
        // This is the djb2 hash function, by Daniel J Bernstein
        let hash = 5318;
        for(let i = this.startIndex; i < this.startIndex + this.length; i++) {
            hash = hash * 33 + this.chars[i];
        }
        return hash;
    }
}
interface Hashable {
    fn getHashCode(): int;
}
interface ToString {
    fn toString(): String;
}
class Object extends void implements Hashable, ToString {
    ctor() {}
    override fn toString(): String {
        return "[Object]";
    }
    override fn getHashCode(): int {
        // TODO
        return 0;
    }
    fn equals(other: Object): bool {
        return other == this;
    }
}
fn print(str: String) {
    if(not rtlib_loaded) {
        load_rtlib();
    }
    stdlib.internal.print(str._getCleanBuffer());
}
fn println(str: String) {
    // I know, this is horribly inefficient
    print(str);
    print("\n");
}
fn getOne(): int {
    return 1;
}
fn abs(num: int): int {
    if(num < 0) {
        return num * -1;
    }
    return num;
}
fn min(a: int, b: int): int {
    if(a < b) {
        return a;
    }
    return b;
}
fn max(a: int, b: int): int {
    if(a > b) {
        return a;
    }
    return b;
}
fn itos_base(input: int, base: int): String {
    // This is based on kprintn64 from the OpenBSD project
    // https://github.com/openbsd/src/blob/master/sys/lib/libsa/printf.c
    let symbols = "0123456789abcdefghijklmnopqrstuvwxyz";
    if(input == 0) {
        return "0";
    }
    let is_negative = input < 0;
    let buff = [int: 65];
    let index = 0;
    while(input != 0) {
        buff[index] = symbols.charAt(abs(input % base));
        input /= base;
        index++;
    }
    if(is_negative) {
        buff[index] = '-';
        index++;
    }
    // Our buffer is currently backwards, so reverse it into the new buffer
    // The index here is right because it's off the end
    let newBuff = [int: index];
    let i = 0;
    while(index > 0) {
        // Do this first because index is one off the end
        index--;
        newBuff[i] = buff[index];
        i++;
    }
    return new String(newBuff, 0, i);
}
fn itos(input: int): String {
    return itos_base(input, 10);
}
fn btos(input: bool): String {
    if(input == true) {
        return "true";
    } else {
        return "false";
    }
}
fn stob(input: String): bool {
    if(input.equalsIgnoreCase("yes") or input.equalsIgnoreCase("true")) {
        return true;
    } else if(input.equalsIgnoreCase("no") or input.equalsIgnoreCase("false")) {
        return false;
    }
    die("Unrecognized boolean input in stob");
    // Unreachable
    return false;
}
fn stoi_base(input: String, base: int): int {
    let symbols = "0123456789abcdefghijklmnopqrstuvwxyz";
    let negative = input.charAt(0) == '-';
    if(negative) {
        input = input.substrOpen(1);
    }
    let index = input.length - 1;
    let result = 0;
    let magnitude = 1;
    while(index >= 0) {
        let indexOf = symbols.indexOfChar(input.charAt(index));
        if(indexOf == -1 or indexOf >= base) {
            println(strconcat_all(["Unknown symbol: '", ctos(input.charAt(index)), "', ord: ", itos(input.charAt(index))]))
            die("Unknown symbol in stoi_base");
        }
        result += indexOf * magnitude;
        index--;
        magnitude *= base;
    }
    if(negative) {
        return result * -1;
    }
    return result;
}
fn stoi(input: String): int {
    return stoi_base(input, 10);
}
fn ctos(input: int): String {
    return new String([input], 0, 1);
}
fn strconcat_all(strs: [String]): String {
    let len = 0;
    for(let i = 0; i < #strs; i++) {
        len += strs[i].length;
    }
    let result = [int: len];
    let index = 0;
    for(let i = 0; i < #strs; i++) {
        for(let j = 0; j < strs[i].length; j++) {
            result[index] = strs[i].charAt(j);
            index++;
        }
    }
    return new String(result, 0, #result);
}
fn strjoin(strs: [String], delimiter: String): String {
    if(#strs == 0) {
        return "";
    }
    let len = 0;
    for(let i = 0; i < #strs; i++) {
        len += strs[i].length;
    }
    len += delimiter.length * ((#strs) - 1);
    let result = [int: len];
    let index = 0;
    for(let i = 0; i < #strs; i++) {
        for(let j = 0; j < strs[i].length; j++) {
            result[index] = strs[i].charAt(j);
            index++;
        }
        if(i < (#strs) - 1) {
            for(let j = 0; j < delimiter.length; j++) {
                result[index] = delimiter.charAt(j);
                index++;
            }
        }
    }
    return new String(result, 0, len);
}
abstract class InputStream {
    // This is heavily inspired by java.io.InputStream.
    ctor() {}
    abstract fn read(buff: [int], maxlen: int): int;
    abstract fn hasMore(): bool;
    abstract fn available(): int;
}
class StdinInputStream extends InputStream {
    _hasMore: bool;
    ctor() {
        // Do nothing
        this._hasMore = true;
    }
    override fn read(buff: [int], maxlen: int): int {
        if(not rtlib_loaded) {
            load_rtlib();
        }
        let result = stdlib.internal.read(buff, maxlen);
        if(result <= 0) {
            this._hasMore = false;
        }
        return result;
    }
    override fn hasMore(): bool {
        return this._hasMore;
    }
    override fn available(): int {
        if(this.hasMore()) {
            return 1;
        }
        return 0;
    }
}
abstract class SeekableInputStream extends InputStream {
    ctor() {
        super();
    }
    fn seek(index: int) {
        die("SeekableInputStream is abstract.");
    }
    fn reset() {
        this.seek(0);
    }
}
class ArrayInputStream extends SeekableInputStream {
    data: [int];
    index: int;
    datalen: int;
    ctor(data: [int]) {
        this.data = data;
        this.index = 0;
        this.datalen = #data;
    }
    override fn read(buff: [int], maxlen: int): int {
        if(maxlen > #buff) {
            maxlen = #buff;
        }
        if(maxlen + this.index > this.datalen) {
            maxlen = this.datalen - this.index;
        }
        for(let i = 0; i < maxlen; i++) {
            buff[i] = this.data[this.index + i];
        }
        this.index += maxlen;
        return maxlen;
    }
    override fn hasMore(): bool {
        return this.index < this.datalen;
    }
    override fn available(): int {
        return this.datalen - this.index;
    }
    override fn seek(index: int) {
        if(index >= this.datalen) {
            die("Invalid seek index");
        }
        this.index = index;
    }
}
class BufferedReader {
    stream: InputStream;
    bufferSize: int;
    buffer: [int];
    bufferIndex: int;
    bufferMax: int;
    ctor(stream: InputStream) {
        this.stream = stream;
        this.bufferSize = 1024;
        this.buffer = null;
        this.bufferIndex = 0;
        this.bufferMax = 0;
    }
    fn setBufferSize(size: int) {
        this.bufferSize = size;
    }
    fn refillBuffer() {
        if(this.buffer == null) {
            this.buffer = [int: this.bufferSize];
        }
        this.bufferMax = this.stream.read(this.buffer, this.bufferSize);
        this.bufferIndex = 0;
    }
    fn nextChar(): int {
        if(this.bufferIndex >= this.bufferMax) {
            this.refillBuffer();
        }
        let ret = this.buffer[this.bufferIndex];
        this.bufferIndex += 1;
        return ret;
    }
    fn hasMore(): bool {
        if(this.bufferIndex >= this.bufferMax) {
            this.refillBuffer();
        }
        return this.bufferIndex < this.bufferMax;
    }
    fn readUntilDelimiter(delimiter: int): String {
        if(this.bufferIndex >= this.bufferMax) {
            this.refillBuffer();
        }
        for(let i = this.bufferIndex; i < this.bufferMax; i++) {
            if(this.buffer[i] == delimiter) {
                let ret = new String(this.buffer, this.bufferIndex, i - this.bufferIndex);
                this.bufferIndex = i + 1;
                return ret;
            }
        }
        let arr = [int: this.bufferSize / 4];
        let index = 0;
        let ch = this.nextChar();
        let shouldContinue = true;
        while(ch != delimiter and shouldContinue) {
            if(not this.hasMore()) {
                shouldContinue = false;
            } else {
                arr[index] = ch;
                index += 1;
                if(index >= #arr) {
                    let newarr = [int: (#arr) * 2];
                    for(let i = 0; i < #arr; i++) {
                        newarr[i] = arr[i];
                    }
                    arr = newarr;
                }
                ch = this.nextChar();
            }
        }
        if(ch != delimiter) {
            arr[index] = ch;
            index += 1;
        }
        return new String(arr, 0, index);
    }
    fn readLine(): String {
        return this.readUntilDelimiter('\n');
    }
}
fn arrayCopy<T>(arr: [T]): [T] {
    let result = [T: #arr];
    for(let i = 0; i < #arr; i++) {
        result[i] = arr[i];
    }
    return result;
}
fn arrayEquals<T>(arr1: [T], arr2: [T]): bool {
    if(#arr1 != #arr2) {
        return false;
    }
    for(let i = 0; i < #arr1; i++) {
        if(arr1[i] != arr2[i]) {
            return false;
        }
    }
    return true;
}
fn arrayReverse<T>(arr: [T]): [T] {
    for(let i = 0; i < #arr / 2; i++) {
        let j = #arr - i - 1;
        let tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    // For convenience
    return arr;
}
fn arraySlice<T>(arr: [T], start: int, end: int): [T] {
    if(start < 0) {
        start += #arr;
    }
    if(end < 0) {
        end += #arr;
    }
    if(start < 0 or end < 0 or start >= #arr or end >= #arr) {
        die(strconcat_all(["Array slice indices out of range (start: ", itos(start), ", end: ", itos(end), ")"]));
    }
    if(end <= start) {
        return [T: 0];
    }
    let length = end - start;
    let result = [T: length];
    for(let i = 0; i < length; i++) {
        result[i] = arr[i + start];
    }
    return result;
}
fn arrayResize<T>(arr: [T], newSize: int): [T] {
    let newArr = [T: newSize];
    for(let i = 0; i < min(#arr, newSize); i++) {
        newArr[i] = arr[i];
    }
    return newArr;
}
abstract class EqualityComparator<S> {
    abstract fn areEqual(first: S, second: S): bool;
}
class DoubleEqualsComparator<R> extends EqualityComparator<R> {
    ctor() {}
    override fn areEqual(first: R, second: R): bool {
        return first == second;
    }
}
class EqualsMethodComparator<R extends Object> extends EqualityComparator<R> {
    ctor() {}
    override fn areEqual(first: R, second: R): bool {
        return first.equals(second);
    }
}
class ArrayList<T> {
    elements: [T];
    length: int;
    equalityComparator: EqualityComparator<T>;
    ctor() {
        this.elements = [T: 2];
        this.length = 0;
        this.equalityComparator = new DoubleEqualsComparator<T>();
    }
    fn _ensureCapacity(capacity: int) {
        if(capacity <= #this.elements) {
            return;
        }
        let newSize = #this.elements * 2;
        if(newSize <= 0 or newSize <= capacity) {
            newSize = max(2, capacity);
        }
        this.elements = arrayResize<T>(this.elements, newSize);
    }
    fn add(t: T) {
        this._ensureCapacity(this.length + 1);
        this.elements[this.length] = t;
        this.length++;
    }
    fn insert(t: T, index: int) {
        this._ensureCapacity(this.length + 1);
        for(let i = this.length; i > index; i--) {
            this.elements[i] = this.elements[i - 1];
        }
        this.elements[index] = t;
        this.length++;
    }
    fn get(index: int): T {
        if(index >= this.length) {
            die(strconcat_all(["ArrayList index out of bounds: ", itos(index)]));
        }
        return this.elements[index];
    }
    fn set(index: int, value: T) {
        if(index >= this.length) {
            die(strconcat_all(["ArrayList index out of bounds: ", itos(index)]));
        }
        this.elements[index] = value;
    }
    fn remove(index: int) {
        for(let i = index; i < this.length - 1; i++) {
            this.elements[i] = this.elements[i + 1];
        }
        this.length--;
    }
    fn removeElement(element: T): bool {
        let index = this.indexOf(element);
        if(index < 0) {
            return false;
        }
        this.remove(index);
        return true;
    }
    fn nextIndexOf(element: T, startIndex: int): int {
        if(startIndex >= this.length or startIndex < 0) {
            die(strconcat_all(["ArrayList index out of bounds: ", itos(startIndex)]));
        }
        for(let i = startIndex; i < this.length; i++) {
            if(this.equalityComparator.areEqual(this.elements[i], element)) {
                return i;
            }
        }
        return -1;
    }
    fn indexOf(element: T): int {
        return this.nextIndexOf(element, 0);
    }
    fn contains(element: T): bool {
        return this.indexOf(element) >= 0;
    }
    fn size(): int {
        return this.length;
    }
    fn toArray(start: int, end: int): [T] {
        return arraySlice<T>(this.elements, start, end);
    }
}
fn ArrayList.withEqualityComparator<R>(comparator: EqualityComparator<R>): ArrayList<R> {
    let ret = new ArrayList<R>();
    ret.equalityComparator = comparator;
    return ret;
}
fn ArrayList.fromArray<R>(list: [R]): ArrayList<R> {
    let ret = new ArrayList<R>();
    ret.elements = arrayCopy<R>(list);
    ret.length = #list;
    return ret;
}